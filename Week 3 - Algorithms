SEARCHING AND SORTING:
(BIG O AND OMEGA NOTATION)

- An algorithm is a set of steps to accomplish some task.

- Linear Search
  - Steps taken: 3 steps
  - N
  - O(N)

- Binary Search
  - Steps taken: 3 steps
  - Bigger data sets make this algorithm better than linear search
  - log2(n): Divide by two each time
  - O(log(N))

- What's the greatest number of steps this algorithm will ever take?
- How many steps did each algorithm take?
- What's the fewest number of steps this algorithm could ever take?
  - Omega(1)

- Common notations:
  - O(1)
  - O(log(N))
  - O(N)
  - O(N^2)
  - Omega(1)
  - Omega(log(N))
  - Omega(N)
  - Omega(N^2)


Sort:

- Merge Sort:
  - O(Nlog(N))
  - Omega(Nlog(N))
  - Merge sort recursively divides the list into two repeatedly and then 
  merges the smaller lists back into a larger one in the correct order.

- Selection Sort:
  - O(N^2)
  - Omega(N^2)
  - Selection sort iterates through the unsorted portions of a list, 
  selecting the smallest element each time and moving it to its correct 
  location.

- Bubble Sort:
  - O(N^2)
  - Omega(N)
  - Bubble sort compares pairs of adjacent values one at a time and swaps 
  them if they are in the incorrect order. This continues until the list 
  is sorted.


STRUCTURES:

Syntax:

typedef struct
{
  string name;
  int votes;
}
candidates;

candidate president;        // candidate president is similar to int number
president.name = "Donald";
president.votes = 1;

OR

candidate candidates[4];    // creates an array called candidates that holds 4 elements with candidate data type. 


- Create a new type which holds a collection of other basic type

- typedef struct
  - give the struct a name that can be re-used in the rest of the file.

- string name / int voutes == structure members

- candidate == name of new data type


STRUCTURE EXAMPLE:

#include <cs50.h>
#include <stdio.h>
#include <string.h>

typedef struct
{
    string name;
    int votes;
}
candidate;

int main(void)
{
    const int num_candidates = 3;
    candidate candidates[num_candidates];
    candidates[0].name = "Donald Trump";
    candidates[0].votes = 4;

    candidates[1].name = "Kamala Harris";
    candidates[1].votes = 2;

    candidates[2].name = "Alexander K.";
    candidates[2].votes = 350;


    int highest_votes = 0;

    for (int i = 0; i < num_candidates; i++)
    {
       if (candidates[i].votes > highest_votes)
       {
        highest_votes = candidates[i].votes;
       }
    }
    printf("%i\n", highest_votes);

    for (int i = 0; i < num_candidates; i++)
    {
        if (candidates[i].votes == 350)
        {
            printf("%s\n", candidates[i].name);
        }
    }

}




RECURSION:

- Factorials
  - 1! == 1
  - 2! == 2 x 1
  - 3! == 3 x 2 x 1

- Recursive Call
  - 4! = 4 x 3!
  - 3! = 3 x 2!
  - 2! = 2 x 1!
  - 1! = 1

#include <cs50.h>
#include <stdio.h>
#include <string.h>

int factorial(int n);

int main(void)
{

    int n;
    do
    {
        n = get_int("n: ");
    }
    while (n < 0);

    printf("%i\n", factorial(n));
}


int factorial(int n)
{
    // Base Case
    if (n == 1)
    {
        return 1;
    }

    return n * factorial(n - 1);
}
























