Visual Studio Code:

TERMINAL:

    code hello.c      // Creates the files to code in
    make hello      // Compiles the program
    ./hello        // Runs the program




DATA TYPES:

bool: Stores True or False

double: Can fit 8 bytes or 64 bits. Same as floats otherwise. Much more precise.

char: 1 character, 1 byte (8 bits). Must put single characters in single quotes '' instead of strings with double quotes

float: decimal number. 32 bits (4 bytes)

int: number, 32 bits (4 bytes)
unsigned int: can be applied to certain types, which double the positive range of variables of that type, at the cost of disallowing any negative values.

long: 64 bits 

string: words.

void: This is a type but not a data type. Means a function won't return a value. Acts as a placeholder



Notes for C:
||  == or statement
&&  == and statement



VARIABLES

Syntax-
    int calls = 3;        // int is the type of the variable
                        // calls is the name of the variabl
                        // = is the assignment operator
                        // type name | value


Inputting and Printing:

int calls = get_int("Calls: ");

Different Format Codes in C:

%c
%f
%i
%li
%s



FOR LOOPS:

for (initialization; condition; update)
{
    // code to repeat
}




WHILE LOOPS:

while (condition)
{
    // something happens
}




DO WHILE LOOPS:

do
{
    // something happens
}
while (condition);




FIRST C PROGRAM: hello.c


#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string answer = get_string("What's your name? ");
    printf("Hello, %s\n", answer);      // %s tells the function to expect a string argument (in this case, answer)
}





GREATER, LESS THEN, OR EQUAL TOO PROGRAM: compare.c

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int x = get_int("input any number for x... ");
    int y = get_int("input any number for y... ");
    if (x < y)
    {
        printf("x is less than y\n");
    }
    else if (x > y)
    {
        printf("x is greater than y\n");
    }
    else
    {
        printf("x is equal to y\n");
    }
}




AGREE OR DISAGREE PROGRAM: agree.c

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    char c = get_char("Do you agree? ");

    if (c == 'y' || c == 'Y')            // c equal to y OR c equal to Y
    {
        printf("Agreed.\n");
    }
    else if (c == 'n' || c == 'N')
    {
        printf("Do not agree.\n");
    }
    else
    {
        printf("You are indecisive.\n");
    }
}


COUNTING PROGRAM: counter.c

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int i = 0;
    while (i < 3)
    {
        printf("meow\n");
        i++;             //can also use i--; and make int i = 3
    }
}


FOR LOOP COUNTING PROGRAM: forLoop.c

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    for (int i = 0; i < 3; i++)
    {
        printf("meow\n");
    }
}



FOREVER LOOP USING WHILE: foreverLoop.c

#include <cs50.h>
#include <stdio.h>

int main(void)
{
   while (true)
   {
    printf("meow\n");
   }
}



DEFINING OUR OWN FUNCTION AND UTILIZING IT: meow.c

#include <stdio.h>

void meow(void);                // Tells the program that the function doesn't exist yet but it will

int main(void)
{
    for (int i = 0; i < 3; i++)
    {
        meow();                    // Calls the function
    }
}


void meow(void)                    // Defines the function
{
    printf("meow\n");
}




DEFINING A FUNCTION THAT ACCEPTS A PARAMETER: meow.c

#include <stdio.h>

void meow(int n);

int main(void)
{

    {
        meow(6);
    }
}


void meow(int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("meow\n");
    }
}





CALCULATOR PROGRAM: calculator.c

#include <cs50.h>
#include <stdio.h>

int add(int a, int b);

int main(void)
{
    int x = get_int("x: ");
    int y = get_int("y: ");

    printf("%i\n", add(x, y));
}


int add(int a, int b)
{
    return a + b;
}





MARIO BRICKS PROGRAM: mario.c

#include <stdio.h>
#include <cs50.h>

int main(void)
{
    // Creates variable n that will be used later
    int n;

    // do loop that promps user for desired size of grid
    do
    {
        n = get_int("Size: ");
    }

    // if n is < 1, user will be prompted to put a new size in
    while (n < 1);

    // Print an n-by-n grid of bricks
    for (int i = 0; i < n; i++)
    {
        // prints n amount of #
        for (int j = 0; j < n; j++)
        {
            printf("#");
        }
        printf("\n");
    }
}



EXAMPLES OF FLOATING POINT IMPRECISION:

#include <cs50.h>
#include <stdio.h>



int main(void)
{
    int x = get_int("x: ");
    int y = get_int("y: ");

    double z = (double) x / (double) y;        // type casting using (float) to convert ints to floats
    printf("%.20f\n", z);            // shows me 5 decimal places for the float number

    // floating point imprecision
}




CONTACT DETAILS PROGRAM: contactDetails.c


 #include <cs50.h>
 #include <stdio.h>

 int main(void)
 {
    string name = get_string("What is your name? ");
    int age = get_int("What is your age? ");
    string phoneNumber = get_string("What is your phone number? ");
    printf("Name: %s\nAge: %i\nNumber: %s\n", name, age, phoneNumber);
 }




MARIO RIGHT FACING PYRAMID:


#include <cs50.h>
#include <stdio.h>

void length(int spaces, int bricks);

int main(void)
{
    int n;

    do
    {
        n = get_int("Height: ");
    }

    while (n < 0 || n > 10);


    for (int i = 0; i < n; i++)
    {
        length(n, i + 1);
    }

}


void length(int spaces, int bricks)
{
    for (int i = 0; i < spaces - bricks; i++)
    {
        printf(" ");
    }

    for (int j = 0; j < bricks; j++)
    {
        printf("#");
    }

    printf("\n");
}


















